<!-- プロジェクト設定のタブ表示 -->
<%
  trackers = @project.trackers
  notifiables = Redmine::Notifiable.all.select { |n| n.parent.blank? }
  templates = @project.mail_template.all
  @template = templates.first || MailTemplate.new

  tab_plain_text = {
   name: 'mail_template_plain_text',
   partial: 'mail_templates/show_plain_text',
   label: :label_template_plain_text,
  }
  tab_html = {
   name: 'mail_template_html',
   partial: 'mail_templates/show_html',
   label: :label_template_html,
  }
  tabs = [tab_plain_text]
  tabs << tab_html unless Setting.plain_text_mail?
%>

<%= form_tag({controller: :mail_templates, action: :update, project_id: @project.id},
             id: 'mail_template',
             method: 'PUT') do %>

<div class="box tabular">
  <p>
    <label for="mail_template_notifiable"><%= l(:field_mail_notification) %>:</label>
    <%= select_tag('mail_template_notifiable',
                   options_for_select(notifiables.map { |n| [l_or_humanize(n.name, prefix: 'label_'), n.name] },
                                      @template.notifiable),
                   onchange: 'changeMailTemplateTracker(); changeMailTemplateTrackerConfigured(); changeMailTemplate(); showMailTemplateFirstTab();') %>
  </p>

  <p>
    <label for="mail_template_tracker_id"><%= l(:field_tracker) %>:</label>
    <%= select_tag('mail_template_tracker_id',
                   options_for_select([[l(:label_template_tracker_all), '']] + trackers.map { |t| [t.name, t.id] },
                                      @template.tracker_id),
                   onchange: 'changeMailTemplate(); showMailTemplateFirstTab();') %>
  </p>

  <%= render_tabs(tabs) %>
</div>

<p>
  <%= submit_tag(l(:button_save)) %>
</p>

<% end %> <!-- form_tag -->

<script type="text/javascript">
  var mailTemplates = [
  <% templates.each do |t| %>
    <%= raw(t.to_json()) %>,
  <% end %>
  ];

  function changeMailTemplateNotifiableConfigured() {
    let options = document.getElementById('mail_template_notifiable').querySelectorAll('option');
    for (let i = 0; i < options.length; i++) {
      options[i].style = null;

      let configured = mailTemplates.find(t => t.notifiable === options[i].value);
      if (configured) {
        options[i].style = 'color: orange;';
      }
    }
  }

  function changeMailTemplateTracker() {
    let notifiable = document.getElementById('mail_template_notifiable').value;

    let tracker = document.getElementById('mail_template_tracker_id');

    if (notifiable.startsWith('issue')) {
      tracker.disabled = false;
    }
    else {
      tracker.value = '';
      tracker.disabled = true;
    }
  }

  function changeMailTemplateTrackerConfigured() {
    let notifiable = document.getElementById('mail_template_notifiable').value;
    let options = document.getElementById('mail_template_tracker_id').querySelectorAll('option');
    for (let i = 0; i < options.length; i++) {
      options[i].style = null;

      let configured = mailTemplates.find(t =>
        t.notifiable === notifiable && (t.tracker_id || '') == options[i].value);
      if (configured) {
        options[i].style = 'color: orange;';
      }
    }
  }

  function changeMailTemplate() {
    let notifiable = document.getElementById('mail_template_notifiable').value;

    let tracker_id = document.getElementById('mail_template_tracker_id').value || null;

    let template = document.getElementById('mail_template_template');
    template.value = '';

    let html = document.getElementById('mail_template_html');
    if (html) {
      html.value = '';
    }

    for (let i = 0; i < mailTemplates.length; i++) {
      if (mailTemplates[i].notifiable == notifiable && mailTemplates[i].tracker_id == tracker_id) {
        template.value = mailTemplates[i].template;

        if (html) {
          html.value = mailTemplates[i].html;
        }

        break;
      }
    }
  }

  function showMailTemplateFirstTab() {
    // hide `tabs-buttons` explicitly because the first tab is in-visible.
    displayTabsButtons();

    showTab('<%= tabs[0][:name] %>', this.href);
  }

  document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('tab-mail_template').addEventListener('click', function() {
      showMailTemplateFirstTab();
    });

    changeMailTemplateNotifiableConfigured();

    changeMailTemplateTrackerConfigured();

    changeMailTemplateTracker();

    // nested tab does not work at first view.
    showMailTemplateFirstTab();
  });
</script>
